CREATE TABLE USERS (USERID INTEGER NOT NULL, USERNAME VARCHAR(100) NOT NULL, DISPLAYNAME VARCHAR(100) NOT NULL, EMAIL VARCHAR(100), SOURCE VARCHAR(4) NOT NULL, PASSWORDHASH VARCHAR(86) NOT NULL, PASSWORDSALT VARCHAR(10) NOT NULL, INSERTDATE TIMESTAMP NOT NULL, INSERTUSERID INTEGER NOT NULL, UPDATEDATE TIMESTAMP, UPDATEUSERID INTEGER, ISACTIVE SMALLINT DEFAULT 1 NOT NULL,LASTDIRECTORYUPDATE TIMESTAMP,USERIMAGE VARCHAR(100), CONSTRAINT PK_USERS PRIMARY KEY (USERID));
CREATE GENERATOR USERS_GEN;


CREATE TABLE LANGUAGES (ID INTEGER NOT NULL, LANGUAGEID VARCHAR(10) NOT NULL, LANGUAGENAME VARCHAR(50) NOT NULL, CONSTRAINT PK_LANGUAGES PRIMARY KEY (ID));
CREATE GENERATOR LANGUAGES_GEN;


CREATE TABLE USERPERMISSIONS (USERPERMISSIONID BIGINT NOT NULL, USERID INTEGER NOT NULL, PERMISSIONKEY VARCHAR(100) NOT NULL,GRANTED SMALLINT DEFAULT 1 NOT NULL, CONSTRAINT PK_USERPERMISSIONS PRIMARY KEY (USERPERMISSIONID));
ALTER TABLE USERPERMISSIONS ADD CONSTRAINT FK_USERPERMISSIONS_USERID FOREIGN KEY (USERID) REFERENCES USERS (USERID);
CREATE UNIQUE ASC INDEX UQ_USERPERM_USERID_PERMKEY ON USERPERMISSIONS (USERID, PERMISSIONKEY);
CREATE GENERATOR USERPERMISSIONS_GEN;

CREATE TABLE ROLES (ROLEID INTEGER NOT NULL, ROLENAME VARCHAR(100) NOT NULL, CONSTRAINT PK_ROLES PRIMARY KEY (ROLEID));
CREATE GENERATOR ROLES_GEN;


CREATE TABLE ROLEPERMISSIONS (ROLEPERMISSIONID BIGINT NOT NULL, ROLEID INTEGER NOT NULL, PERMISSIONKEY VARCHAR(100) NOT NULL, CONSTRAINT PK_ROLEPERMISSIONS PRIMARY KEY (ROLEPERMISSIONID));
ALTER TABLE ROLEPERMISSIONS ADD CONSTRAINT FK_ROLEPERMISSIONS_ROLEID FOREIGN KEY (ROLEID) REFERENCES ROLES (ROLEID);
CREATE UNIQUE ASC INDEX UQ_ROLEPERM_ROLEID_PERMKEY ON ROLEPERMISSIONS (ROLEID, PERMISSIONKEY);
CREATE GENERATOR ROLEPERMISSIONS_GEN;


CREATE TABLE USERROLES (USERROLEID BIGINT NOT NULL, USERID INTEGER NOT NULL, ROLEID INTEGER NOT NULL, CONSTRAINT PK_USERROLES PRIMARY KEY (USERROLEID));
ALTER TABLE USERROLES ADD CONSTRAINT FK_USERROLES_USERID FOREIGN KEY (USERID) REFERENCES USERS (USERID);
ALTER TABLE USERROLES ADD CONSTRAINT FK_USERROLES_ROLEID FOREIGN KEY (ROLEID) REFERENCES ROLES (ROLEID);
CREATE UNIQUE ASC INDEX UQ_USERROLES_USERID_ROLEID ON USERROLES (USERID, ROLEID);
CREATE ASC INDEX IX_USERROLES_ROLEID_USERID ON USERROLES (ROLEID, USERID);
CREATE GENERATOR USERROLES_GEN;

CREATE TABLE USERPREFERENCES (USERPREFERENCEID INTEGER NOT NULL, USERID INTEGER NOT NULL, PREFERENCETYPE VARCHAR(100) NOT NULL, NAME VARCHAR(200) NOT NULL, PREFERENCEVALUE BLOB SUB_TYPE TEXT, CONSTRAINT PK_USERPREFERENCES PRIMARY KEY (USERPREFERENCEID));
CREATE GENERATOR USERPREFERENCES_GEN;

CREATE TABLE EXCEPTIONS (ID BIGINT NOT NULL, GUID CHAR(16) CHARACTER SET OCTETS NOT NULL, APPLICATIONNAME VARCHAR(50) NOT NULL, MACHINENAME VARCHAR(50) NOT NULL, CREATIONDATE TIMESTAMP NOT NULL, EXCEPTIONTYPE VARCHAR(100) NOT NULL, ISPROTECTED SMALLINT DEFAULT 1 NOT NULL, HOST VARCHAR(100), URL VARCHAR(500), HTTPMETHOD VARCHAR(10), IPADDRESS VARCHAR(40), SOURCE VARCHAR(100), EXCEPTIONMESSAGE VARCHAR(1000), DETAIL BLOB SUB_TYPE TEXT, STATUSCODE INTEGER, SQL BLOB SUB_TYPE TEXT, DELETIONDATE TIMESTAMP, FULLJSON BLOB SUB_TYPE TEXT, ERRORHASH INTEGER, DUPLICATECOUNT INTEGER DEFAULT 1 NOT NULL, CONSTRAINT PK_EXCEPTIONS PRIMARY KEY (ID));
CREATE ASC INDEX IX_EXCEPTIONS_GUID_APP_DEL_CRE ON EXCEPTIONS (GUID, APPLICATIONNAME, DELETIONDATE, CREATIONDATE);
CREATE ASC INDEX IX_EXCEPTIONS_HASH_APP_CRE_DEL ON EXCEPTIONS (ERRORHASH, APPLICATIONNAME, CREATIONDATE, DELETIONDATE);
CREATE ASC INDEX IX_EXCEPTIONS_APP_DEL_CRE ON EXCEPTIONS (APPLICATIONNAME, DELETIONDATE, CREATIONDATE);
CREATE GENERATOR EXCEPTIONS_GEN;

CREATE TABLE BUSINESSUNITS(UNITID INTEGER NOT NULL, NAME VARCHAR(100) NOT NULL, PARENTUNITID INTEGER,CONSTRAINT PK_BUSINESSUNITS PRIMARY KEY (UNITID));
ALTER TABLE BUSINESSUNITS ADD CONSTRAINT FK_BUSINESSUNITS_PARENTUNIT FOREIGN KEY (PARENTUNITID) REFERENCES BUSINESSUNITS(UNITID);
CREATE GENERATOR BUSINESSUNITS_GEN;

CREATE TABLE CONTACTS(CONTACTID INTEGER NOT NULL, TITLE VARCHAR(30), FIRSTNAME VARCHAR(50) NOT NULL, LASTNAME VARCHAR(50) NOT NULL, EMAIL VARCHAR(100) NOT NULL, IDENTITYNO VARCHAR(20), USERID INTEGER,CONSTRAINT PK_CONTACTS PRIMARY KEY (CONTACTID));
ALTER TABLE CONTACTS ADD CONSTRAINT FK_CONTACTS_USERID FOREIGN KEY (USERID) REFERENCES USERS(USERID);
CREATE GENERATOR CONTACTS_GEN;

CREATE TABLE MEETINGLOCATIONS(LOCATIONID INTEGER NOT NULL,NAME VARCHAR(100) NOT NULL,ADDRESS VARCHAR(300),LATITUDE DOUBLE PRECISION, LONGITUDE DOUBLE PRECISION, CONSTRAINT PK_MEETINGLOCATIONS PRIMARY KEY (LOCATIONID));
CREATE GENERATOR MEETINGLOCATIONS_GEN;

CREATE TABLE MEETINGTYPES(MEETINGTYPEID INTEGER NOT NULL,NAME VARCHAR(100) NOT NULL, CONSTRAINT PK_MEETINGTYPES PRIMARY KEY (MEETINGTYPEID));
CREATE GENERATOR MEETINGTYPES_GEN;

CREATE TABLE MEETINGS(MEETINGID INTEGER NOT NULL,MEETINGNAME VARCHAR(100) NOT NULL,MEETINGNUMBER VARCHAR(20),MEETINGGUID CHAR(16) CHARACTER SET OCTETS NOT NULL,
MEETINGTYPEID INTEGER NOT NULL,STARTDATE TIMESTAMP NOT NULL,ENDDATE TIMESTAMP NOT NULL,LOCATIONID INTEGER,UNITID INTEGER,ORGANIZERCONTACTID INTEGER,
REPORTERCONTACTID INTEGER,INSERTUSERID INTEGER NOT NULL,INSERTDATE TIMESTAMP NOT NULL,UPDATEUSERID INTEGER,UPDATEDATE TIMESTAMP,CONSTRAINT PK_MEETINGS PRIMARY KEY (MEETINGID));
ALTER TABLE MEETINGS ADD CONSTRAINT FK_MEETINGS_TYPEID FOREIGN KEY (MEETINGTYPEID) REFERENCES MEETINGTYPES(MEETINGTYPEID);
ALTER TABLE MEETINGS ADD CONSTRAINT FK_MEETINGS_LOCATIONID FOREIGN KEY (LOCATIONID) REFERENCES MEETINGLOCATIONS(LOCATIONID);
ALTER TABLE MEETINGS ADD CONSTRAINT FK_MEETINGS_UNITID FOREIGN KEY (UNITID) REFERENCES BUSINESSUNITS(UNITID);
ALTER TABLE MEETINGS ADD CONSTRAINT FK_MEETINGS_ORGANIZER FOREIGN KEY (ORGANIZERCONTACTID) REFERENCES CONTACTS(CONTACTID);
ALTER TABLE MEETINGS ADD CONSTRAINT FK_MEETINGS_REPORTER FOREIGN KEY (REPORTERCONTACTID) REFERENCES CONTACTS(CONTACTID);
CREATE GENERATOR MEETINGS_GEN;

CREATE TABLE MEETINGAGENDATYPES(AGENDATYPEID INTEGER NOT NULL,NAME VARCHAR(100) NOT NULL,CONSTRAINT PK_MEETINGAGENDATYPES PRIMARY KEY (AGENDATYPEID));
CREATE GENERATOR MEETINGAGENDATYPES_GEN;

CREATE TABLE MEETINGAGENDAS(AGENDAID INTEGER NOT NULL,MEETINGID INTEGER NOT NULL,AGENDANUMBER INTEGER NOT NULL,TITLE VARCHAR(2000),DESCRIPTION BLOB SUB_TYPE TEXT,
AGENDATYPEID INTEGER NOT NULL,REQUESTEDBYCONTACTID INTEGER,IMAGES BLOB SUB_TYPE TEXT,ATTACHMENTS BLOB SUB_TYPE TEXT,CONSTRAINT PK_MEETINGAGENDAS PRIMARY KEY (AGENDAID));
ALTER TABLE MEETINGAGENDAS ADD CONSTRAINT FK_MEETAGENDAS_MEETINGID FOREIGN KEY (MEETINGID) REFERENCES MEETINGS(MEETINGID);
ALTER TABLE MEETINGAGENDAS ADD CONSTRAINT FK_MEETAGENDAS_AGENDATYPEID FOREIGN KEY (AGENDATYPEID) REFERENCES MEETINGAGENDATYPES(AGENDATYPEID);
ALTER TABLE MEETINGAGENDAS ADD CONSTRAINT FK_MEETAGENDAS_REQUESTEDBY FOREIGN KEY (REQUESTEDBYCONTACTID) REFERENCES CONTACTS(CONTACTID);
CREATE GENERATOR MEETINGAGENDAS_GEN;

CREATE TABLE MEETINGAGENDARELEVANT(AGENDARELEVANTID INTEGER NOT NULL,AGENDAID INTEGER NOT NULL,CONTACTID INTEGER NOT NULL,CONSTRAINT PK_MEETINGAGENDARELEVANT PRIMARY KEY (AGENDARELEVANTID));
ALTER TABLE MEETINGAGENDARELEVANT ADD CONSTRAINT FK_AGENDAREL_AGENDAID FOREIGN KEY (AGENDAID) REFERENCES MEETINGAGENDAS(AGENDAID);
ALTER TABLE MEETINGAGENDARELEVANT ADD CONSTRAINT FK_AGENDAREL_CONTACTID FOREIGN KEY (CONTACTID) REFERENCES CONTACTS(CONTACTID);
CREATE GENERATOR MEETINGAGENDARELEVANT_GEN;

CREATE TABLE MEETINGATTENDEES(ATTENDEEID INTEGER NOT NULL,MEETINGID INTEGER NOT NULL,CONTACTID INTEGER NOT NULL,ATTENDEETYPE INTEGER NOT NULL,ATTENDEESTATUS INTEGER NOT NULL,CONSTRAINT PK_MEETINGATTENDEES PRIMARY KEY (ATTENDEEID));
ALTER TABLE MEETINGATTENDEES ADD CONSTRAINT FK_MEETATTENDEES_MEETINGID FOREIGN KEY (MEETINGID) REFERENCES MEETINGS(MEETINGID);
ALTER TABLE MEETINGATTENDEES ADD CONSTRAINT FK_MEETATTENDEES_CONTACTID FOREIGN KEY (CONTACTID) REFERENCES CONTACTS(CONTACTID);
CREATE GENERATOR MEETINGATTENDEES_GEN;

CREATE TABLE MEETINGDECISIONS(DECISIONID INTEGER NOT NULL,MEETINGID INTEGER NOT NULL,AGENDAID INTEGER NOT NULL,DESCRIPTION BLOB SUB_TYPE TEXT,DECISIONNUMBER INTEGER NOT NULL,RESPONSIBLECONTACTID INTEGER,DUEDATE TIMESTAMP,
RESOLUTIONSTATUS INTEGER NOT NULL,IMAGES BLOB SUB_TYPE TEXT,ATTACHMENTS BLOB SUB_TYPE TEXT,CONSTRAINT PK_MEETINGDECISIONS PRIMARY KEY (DECISIONID));
ALTER TABLE MEETINGDECISIONS ADD CONSTRAINT FK_MEETDECISIONS_MEETINGID FOREIGN KEY (MEETINGID) REFERENCES MEETINGS(MEETINGID);
ALTER TABLE MEETINGDECISIONS ADD CONSTRAINT FK_MEETDECISIONS_AGENDAID FOREIGN KEY (AGENDAID) REFERENCES MEETINGAGENDAS(AGENDAID);
ALTER TABLE MEETINGDECISIONS ADD CONSTRAINT FK_MEETDECISIONS_AGENDATYPE FOREIGN KEY (DECISIONNUMBER) REFERENCES MEETINGAGENDATYPES(AGENDATYPEID);
ALTER TABLE MEETINGDECISIONS ADD CONSTRAINT FK_MEETDECISIONS_REQUESTEDBY FOREIGN KEY (RESPONSIBLECONTACTID) REFERENCES CONTACTS(CONTACTID);
CREATE GENERATOR MEETINGDECISIONS_GEN;

CREATE TABLE MEETINGDECISIONRELEVANT(DECISIONRELEVANTID INTEGER NOT NULL,DECISIONID INTEGER NOT NULL,CONTACTID INTEGER NOT NULL,CONSTRAINT PK_MEETINGDECISIONRELEVANT PRIMARY KEY (DECISIONRELEVANTID));
ALTER TABLE MEETINGDECISIONRELEVANT ADD CONSTRAINT FK_DECISIONREL_DECISIONID FOREIGN KEY (DECISIONID) REFERENCES MEETINGDECISIONS(DECISIONID);
ALTER TABLE MEETINGDECISIONRELEVANT ADD CONSTRAINT FK_DECISIONREL_CONTACTID FOREIGN KEY (CONTACTID) REFERENCES CONTACTS(CONTACTID);
CREATE GENERATOR MEETINGDECISIONRELEVANT_GEN;

commit transaction;

SET TERM ^ ;

CREATE TRIGGER USERS_GEN_TRG FOR USERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USERID IS NULL) THEN
        NEW.USERID = GEN_ID(USERS_GEN, 1);
END^

CREATE TRIGGER LANGUAGES_GEN_TRG FOR LANGUAGES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(LANGUAGES_GEN, 1);
END^

CREATE TRIGGER USERPERMISSIONS_GEN_TRG FOR USERPERMISSIONS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USERPERMISSIONID IS NULL) THEN
        NEW.USERPERMISSIONID = GEN_ID(USERPERMISSIONS_GEN, 1);
END^

CREATE TRIGGER ROLES_GEN_TRG FOR ROLES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ROLEID IS NULL) THEN
        NEW.ROLEID = GEN_ID(ROLES_GEN, 1);
END^

CREATE TRIGGER ROLEPERMISSIONS_GEN_TRG FOR ROLEPERMISSIONS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ROLEPERMISSIONID IS NULL) THEN
        NEW.ROLEPERMISSIONID = GEN_ID(ROLEPERMISSIONS_GEN, 1);
END^

CREATE TRIGGER USERROLES_GEN_TRG FOR USERROLES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USERROLEID IS NULL) THEN
        NEW.USERROLEID = GEN_ID(USERROLES_GEN, 1);
END^

CREATE TRIGGER USERPREFERENCES_GEN_TRG FOR USERPREFERENCES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.USERID IS NULL) THEN
        NEW.USERID = GEN_ID(USERPREFERENCES_GEN, 1);
END^

CREATE TRIGGER EXCEPTIONS_GEN_TRG FOR EXCEPTIONS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(EXCEPTIONS_GEN, 1);
END^

CREATE TRIGGER BUSINESSUNITS_GEN_TRG FOR BUSINESSUNITS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.UNITID IS NULL) THEN
        NEW.UNITID = GEN_ID(BUSINESSUNITS_GEN, 1);
END^

CREATE TRIGGER CONTACTS_GEN_TRG FOR CONTACTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.CONTACTID IS NULL) THEN
        NEW.CONTACTID = GEN_ID(CONTACTS_GEN, 1);
END^

CREATE TRIGGER MEETINGLOCATIONS_GEN_TRG FOR MEETINGLOCATIONS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.LOCATIONID IS NULL) THEN
        NEW.LOCATIONID = GEN_ID(MEETINGLOCATIONS_GEN, 1);
END^

CREATE TRIGGER MEETINGTYPES_GEN_TRG FOR MEETINGTYPES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.MEETINGTYPEID IS NULL) THEN
        NEW.MEETINGTYPEID = GEN_ID(MEETINGTYPES_GEN, 1);
END^

CREATE TRIGGER MEETINGS_GEN_TRG FOR MEETINGS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.MEETINGID IS NULL) THEN
        NEW.MEETINGID = GEN_ID(MEETINGS_GEN, 1);
END^

CREATE TRIGGER MEETINGAGENDATYPES_GEN_TRG FOR MEETINGAGENDATYPES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.AGENDATYPEID IS NULL) THEN
        NEW.AGENDATYPEID = GEN_ID(MEETINGAGENDATYPES_GEN, 1);
END^

CREATE TRIGGER MEETINGAGENDAS_GEN_TRG FOR MEETINGAGENDAS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.AGENDAID IS NULL) THEN
        NEW.AGENDAID = GEN_ID(MEETINGAGENDAS_GEN, 1);
END^

CREATE TRIGGER MEETINGAGENDARELEVANT_GEN_TRG FOR MEETINGAGENDARELEVANT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.AGENDARELEVANTID IS NULL) THEN
        NEW.AGENDARELEVANTID = GEN_ID(MEETINGAGENDARELEVANT_GEN, 1);
END^

CREATE TRIGGER MEETINGATTENDEES_GEN_TRG FOR MEETINGATTENDEES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ATTENDEEID IS NULL) THEN
        NEW.ATTENDEEID = GEN_ID(MEETINGATTENDEES_GEN, 1);
END^

CREATE TRIGGER MEETINGDECISIONS_GEN_TRG FOR MEETINGDECISIONS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.DECISIONID IS NULL) THEN
        NEW.DECISIONID = GEN_ID(MEETINGDECISIONS_GEN, 1);
END^

CREATE TRIGGER MEETINGDECISIONRELEVANT_GEN_TRG FOR MEETINGDECISIONRELEVANT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.DECISIONRELEVANTID IS NULL) THEN
        NEW.DECISIONRELEVANTID = GEN_ID(MEETINGDECISIONRELEVANT_GEN, 1);
END^

SET TERM ; ^

commit transaction;

INSERT INTO USERS (USERNAME, DISPLAYNAME, EMAIL, SOURCE, PASSWORDHASH, PASSWORDSALT, INSERTDATE, INSERTUSERID, ISACTIVE) 
VALUES ('admin', 'admin', 'admin@dummy.com', 'site', 'rfqpSPYs0ekFlPyvIRTXsdhE/qrTHFF+kKsAUla7pFkXL4BgLGlTe89GDX5DBysenMDj8AqbIZPybqvusyCjwQ', 'hJf_F', '2014-01-01 00:00:00', 1, 1);

INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('en', 'English');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('ru', 'Russian');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('ed', 'Spanish');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('tr', 'Turkish');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('de', 'German');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('zh-CN', 'chinese (Simplified)');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('it', 'Italian');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('pt', 'Portuguese');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('pt-BR', 'Portuguese (Brazil)');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('fa', 'Farsi');
INSERT INTO LANGUAGES (LANGUAGEID, LANGUAGENAME) VALUES ('vi-VN', 'Vietnamese (Vietnam)');

commit transaction;
